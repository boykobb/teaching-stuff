/select {  % предикат масив -> масив-подредица
  [ 3 1 roll
  {2 copy exch exec {exch} {pop} ifelse} forall
  pop ]
} def

/map {  % функция масив -> масив'
  [ 3 1 roll
  {1 index exec exch} forall
  pop ]
} def

/map! {  % функция масив -> същият-масив-преобразуван
  dup length 1 sub -1 0 {
    3 copy
    get exch exec
    2 index 3 1 roll put
  } for
  exch pop
} def

/zipWith {  % функция масив₁ масив₂ -> масив₃
  2 copy length exch length 2 copy gt {exch} if pop
  dup array 5 1 roll
  1 sub -1 0 {
    dup 3 index exch get
    2 index 2 index get
    5 index exec
    5 index 3 1 roll put
  } for
  pop pop pop
} def

/reverse {  % масив -> обърнат-масив
  aload
  length dup [ exch 2 add 1 roll
  -1 2 {1 roll} for
  ]
} def

/reverse! {  % масив -> обърнат-същия-масив
  aload
  dup length dup 3 1 roll mark 3 1 roll 3 add 2 roll
  -1 2 {1 roll} for
  counttomark -1 roll astore exch pop
} def

/fold-left {  % f u as -> (...((u f a1) f a2) ...) f an
  dup length 0 eq {
    pop
  } {
    {2 index exec} forall
  } ifelse
  exch pop
} def

/scan-left {  % f u as -> масив от u, u f a1, (u f a1) f a2, (...((u f a1) f a2) ...) f an
  [ 4 1 roll
  dup length 0 eq {
    pop exch
  } {
    3 -1 roll exch
    {2 index exch 2 index exec exch} forall
  } ifelse
  pop ]
} def

% За следната процедура се приема, че повикването на процедурата-аргумент f не води до промяна на текущия речник.
/forall-back {  % масив f --
  << /f 3 -1 roll /a 5 -1 roll >>
  begin
  a length 1 sub -1 0 {
    a exch get f
  } for
  end
} def

% Процедурата [ exch {} forall-back ] е като reverse: по даден масив създава обърнат.

/fold-right {  % f u as -> (...((u f a1) f a2) ...) f an
  dup length 0 eq {
    pop
  } {
    {exch 2 index exec} forall-back
  } ifelse
  exch pop
} def

% ----------------------------------------------------------
% Примери за select.
{0 gt} [] select ==
{0 gt} [-2 0 -1 -3] select ==
{0 gt} [1 2 -2 2 0 1 -1 -3 3] select ==
() =

% Пример за map.
/a [1 2 3 4] def
{10 mul} a map
a == ==         % a не е променен, образуван е нов масив
() =

% Пример за map!.
{10 mul} a map!
pop a ==        % променен е самият a
() =

% Пример за zipWith.
{add} [10 20 30 40 50] [3 5 7] zipWith ==
() =

% Пример за reverse.
a reverse
a == ==         % a не е променен, образуван е нов масив
() =

% Пример за reverse!.
a reverse!
pop a ==        % променен е самият a
() =

% Пример за fold-left: пресмятане на произведението на числа в масив.
{mul} 1 [3 5 1 8] fold-left
==
() =

% Пример за scan-left: пресмятане на поредните произведения на числа в масив.
{mul} 1 [3 5 1 8] scan-left
==
() =

% Пример за forall-back: извеждане на съдържанието на масив отзад напред.
[3 5 8] {=} forall-back

quit
